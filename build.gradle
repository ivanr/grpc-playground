plugins {

    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'

    // https://plugins.gradle.org/plugin/com.google.protobuf
    // https://github.com/google/protobuf-gradle-plugin
    id 'com.google.protobuf' version '0.9.4'

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'

    // https://plugins.gradle.org/plugin/io.freefair.lombok
    id "io.freefair.lombok" version "8.6"
}

application {
    mainClass = 'playground.grpc.HelloServer'
}

repositories {
    mavenCentral()
}

def grpcVersion = '1.65.1'
def openTelemetryVersion = '1.40.0'
def protobufVersion = '3.25.4'
def protocVersion = protobufVersion

dependencies {

    // Core gRPC libraries.
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-inprocess:${grpcVersion}"

    // Fix to make annotations work; see https://github.com/grpc/grpc-java/issues/6833
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // Various protobuf utilities, including marshalling to and from JSON.
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    // Netty is used to run the gRPC server. This version relies on Java's TLS stack.
    implementation "io.grpc:grpc-netty:${grpcVersion}"

    // Shaded Netty includes a TLS stack based on BoringSSL, but it's heavier (7 MB versus 300 KB).
    //runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    // https://mvnrepository.com/artifact/args4j/args4j
    implementation group: 'args4j', name: 'args4j', version: '2.37'

    // https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-sdk
    implementation group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: "${openTelemetryVersion}"

    // https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-exporter-otlp
    implementation group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: "${openTelemetryVersion}"

    // https://mvnrepository.com/artifact/io.opentelemetry.instrumentation/opentelemetry-grpc-1.6
    implementation group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-grpc-1.6', version: '2.6.0-alpha'

    // Testing.

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"

    // https://mvnrepository.com/artifact/junit/junit
    testImplementation "junit:junit:4.13.2"
}

configurations {
    compileClasspath {
        attributes.attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE,
                objects.named(TargetJvmEnvironment.class, TargetJvmEnvironment.STANDARD_JVM))
    }
}

protobuf {

    // Where the generated files will be placed. This is also the default
    // location, but using explicit documentation as a way of documentation.
    generatedFilesBaseDir = "$buildDir/generated/source/proto"

    protoc {
        // Use the precompiled protoc from Maven Central.
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }

    plugins {
        grpc {
            // Use the gRPC codegen plugin from Maven Central.
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    // Applies the above plugins.
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}
